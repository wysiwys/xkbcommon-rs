/*
 * Copyright © 2024 wysiwys
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice (including the next
 * paragraph) shall be included in all copies or substantial portions of the
 * Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 *
 */

use convert_case::{Case, Casing};
use std::fs::File;
use std::io::{BufRead, BufReader, BufWriter, Write};
use std::path::Path;
use unicase::UniCase;

pub fn make_keywords_file(in_path: &Path, out_path: &Path) {
    let in_file = BufReader::new(File::open(in_path).unwrap());

    let mut out_file = BufWriter::new(File::create(out_path).unwrap());
    let mut keywords = vec![];
    let mut strings = vec![];

    writeln!(
        &mut out_file,
        r#"
// This file is autogenerated by codegen/src/keywords.rs
/*
 * Copyright © 2024 wysiwys
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice (including the next
 * paragraph) shall be included in all copies or substantial portions of the
 * Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
 * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 *
 */

use crate::lexer::Token;
use unicase::*;"#
    )
    .unwrap();
    let mut map_builder = phf_codegen::OrderedMap::new();
    let re = regex::Regex::new(r"([a-z_]+),[ \t]*([A-Z_]+)").unwrap();
    for line in in_file.lines() {
        let l = line.unwrap().clone();
        if let Some((_, [key, value])) = re.captures(l.as_str()).map(|caps| caps.extract()) {
            let value = value.to_case(Case::UpperCamel);

            if !keywords.contains(&value) {
                keywords.push(value.clone());
                strings.push(key.to_owned());
            }
            let value = format!("Token::{}", value);
            map_builder.entry(UniCase::unicode(key.to_owned()), &value);
        } else {
            panic!("Token could not be read");
        }
    }

    //to_string
    writeln!(
        &mut out_file,
        "
pub(crate) static KEYWORDS: phf::OrderedMap<UniCase<&'static str>, Token> = {}\n;\n",
        map_builder.build()
    )
    .unwrap();
}
